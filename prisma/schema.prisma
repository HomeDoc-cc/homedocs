// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// User account information from OAuth providers
model Account {
  /// Unique identifier for the account
  id                String  @id @default(cuid())
  /// Reference to the user who owns this account
  userId            String
  /// Type of the account (e.g., oauth, email)
  type              String
  /// OAuth provider name (e.g., google, github)
  provider          String
  /// Unique identifier from the OAuth provider
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// User session information
model Session {
  /// Unique identifier for the session
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// User profile and authentication information
model User {
  /// Unique identifier for the user
  id            String    @id @default(cuid())
  /// User's display name
  name          String?
  /// User's email address
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  /// URL to user's profile image
  image         String?
  accounts      Account[]
  sessions      Session[]

  /// Homes owned by the user
  ownedHomes    Home[]         @relation("HomeOwner")
  /// Homes shared with the user
  sharedHomes   HomeShare[]
  /// Tasks created by the user
  createdTasks  Task[]         @relation("TaskCreator")
  /// Tasks assigned to the user
  assignedTasks Task[]         @relation("TaskAssignee")
  calendarToken CalendarToken?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

/// Information about a home/property
model Home {
  /// Unique identifier for the home
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// Name of the home/property
  name        String
  /// Physical address of the home
  address     String
  /// Additional details about the home
  description String?
  /// Array of image URLs for the home
  images      String[] @default([])

  owner  User   @relation("HomeOwner", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  shares    HomeShare[]
  rooms     Room[]
  items     Item[]
  tasks     Task[]
  paints    Paint[]
  floorings Flooring[]
}

/// Access sharing configuration for a home
model HomeShare {
  id        String    @id @default(cuid())
  homeId    String
  userId    String
  /// Access level for the shared user (READ or WRITE)
  role      ShareRole @default(READ)
  home      Home      @relation(fields: [homeId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())

  @@unique([homeId, userId])
}

/// Room within a home
model Room {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// Name of the room
  name        String
  /// Additional details about the room
  description String?
  /// Array of image URLs for the room
  images      String[] @default([])

  home   Home   @relation(fields: [homeId], references: [id], onDelete: Cascade)
  homeId String

  items     Item[]
  tasks     Task[]
  paints    Paint[]
  floorings Flooring[]
}

/// Item or appliance within a room
model Item {
  /// Unique identifier for the item
  id            String    @id @default(cuid())
  /// Name of the item
  name          String
  /// Additional details about the item
  description   String?
  /// Category of the item (e.g., appliance, furniture)
  category      String?
  /// Manufacturer/brand of the item
  manufacturer  String?
  /// Model number of the item
  modelNumber   String?
  /// Serial number of the item
  serialNumber  String?
  /// Date the item was purchased
  purchaseDate  DateTime?
  /// Warranty expiration date
  warrantyUntil DateTime?
  /// URL to the item's manual
  manualUrl     String?
  /// Array of image URLs for the item
  images        String[]  @default([])

  homeId String
  home   Home   @relation(fields: [homeId], references: [id], onDelete: Cascade)
  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Maintenance or todo task
model Task {
  /// Unique identifier for the task
  id          String       @id @default(cuid())
  /// Title of the task
  title       String
  /// Detailed description of the task
  description String?
  /// Current status of the task
  status      TaskStatus   @default(PENDING)
  /// Priority level of the task
  priority    TaskPriority @default(MEDIUM)
  /// Due date for the task
  dueDate     DateTime?

  /// Whether this is a recurring task
  isRecurring   Boolean             @default(false)
  /// Frequency interval for recurring tasks
  interval      Int?
  /// Time unit for recurring tasks (DAILY, WEEKLY, etc.)
  unit          TaskRecurrenceUnit?
  /// When the task was last completed
  lastCompleted DateTime?
  /// Next scheduled due date for recurring tasks
  nextDueDate   DateTime?
  /// Reference to the original recurring task
  parentTaskId  String?
  parentTask    Task?               @relation("RecurringTasks", fields: [parentTaskId], references: [id])
  childTasks    Task[]              @relation("RecurringTasks")

  homeId String?
  home   Home?   @relation(fields: [homeId], references: [id], onDelete: Cascade)
  roomId String?
  room   Room?   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  itemId String?
  item   Item?   @relation(fields: [itemId], references: [id], onDelete: Cascade)

  creatorId  String
  creator    User    @relation("TaskCreator", fields: [creatorId], references: [id])
  assigneeId String?
  assignee   User?   @relation("TaskAssignee", fields: [assigneeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Access level for shared homes
enum ShareRole {
  /// Read-only access
  READ
  /// Read and write access
  WRITE
}

/// Status options for tasks
enum TaskStatus {
  /// Task is waiting to be started
  PENDING
  /// Task is currently being worked on
  IN_PROGRESS
  /// Task has been finished
  COMPLETED
  /// Task has been cancelled
  CANCELLED
}

/// Priority levels for tasks
enum TaskPriority {
  /// Low priority task
  LOW
  /// Medium priority task
  MEDIUM
  /// High priority task
  HIGH
  /// Urgent priority task
  URGENT
}

/// Time units for recurring tasks
enum TaskRecurrenceUnit {
  /// Recurs daily
  DAILY
  /// Recurs weekly
  WEEKLY
  /// Recurs monthly
  MONTHLY
  /// Recurs yearly
  YEARLY
}

/// Paint information for a room or home
model Paint {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// Name of the paint
  name     String
  /// Brand of the paint
  brand    String?
  /// Color name or description
  color    String?
  /// Paint finish (e.g., matte, satin)
  finish   String?
  /// Paint color code
  code     String?
  /// Where the paint was used
  location String?
  /// Additional notes about the paint
  notes    String?

  home   Home?   @relation(fields: [homeId], references: [id], onDelete: Cascade)
  homeId String?

  room   Room?   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String?

  @@unique([homeId, roomId])
}

/// Flooring information for a room or home
model Flooring {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// Name of the flooring
  name     String
  /// Type of flooring (e.g., hardwood, tile)
  type     String
  /// Material of the flooring
  material String
  /// Brand of the flooring
  brand    String
  /// Color of the flooring
  color    String?
  /// Pattern of the flooring
  pattern  String?
  /// Additional notes about the flooring
  notes    String?

  home   Home?   @relation(fields: [homeId], references: [id], onDelete: Cascade)
  homeId String?

  room   Room?   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String?

  @@unique([homeId, roomId])
}

/// Paint color information
model Color {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// Unique color code
  code  String @unique
  /// Name of the color
  name  String
  /// Brand of the paint
  brand String
  /// Hexadecimal color value
  hex   String
  /// Red component (0-255)
  rgbR  Int
  /// Green component (0-255)
  rgbG  Int
  /// Blue component (0-255)
  rgbB  Int
}

/// Token for calendar integration
model CalendarToken {
  id        String   @id @default(cuid())
  /// Unique token for calendar access
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  output   = "../static/schemas"
}
